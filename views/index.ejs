<!DOCTYPE html>
<html lang="en">
    <head>
        <title>Intro to WebRTC</title>
        <link rel="stylesheet" href="styles.css">
        <script src="/socket.io/socket.io.js"></script>
    </head>
    <body>

        <video id="my-video-tag" autoplay></video>
        <video id="their-video-tag" autoplay></video>
        
        <div>
            <label for="my-name">Your name</label>
            <input id="my-name" type="text" />
            <label for="my-message">Message</label>
            <input id="my-message" type="text" />
            <input id="send-message" type="submit" />
            
            <div id="chat-area" >Message Output:<br></div>
            
            <div id="signaling-debug-area">Signaling Debug Messages: <br></div>
        </div>

        <script>
            var myVideoArea = document.getElementById("my-video-tag");
            var theirVideoArea = document.getElementById("their-video-tag");
            var signalingArea = document.getElementById('signaling-debug-area');

            // chat room
            var myName = document.getElementById('my-name');
            var myMessage = document.getElementById('my-message');
            var sendMessage = document.getElementById('send-message');
            var chatArea = document.getElementById('chat-area');
            var CHAT_ROOM = "chat_room";
            var SIGNAL_ROOM = "signal_room";
            var configuration = {
                'iceServers': [{
                    'url': 'stun:stun.l.google.com:19302'
                }]
            };
            var rtcPeerConn;

            io = io.connect();
            io.emit('ready', {
                "chat_room": CHAT_ROOM,
                "signal_room": SIGNAL_ROOM
            });

            io.emit('signal', {
                "type": "user_here",
                "message": "bogus message text",
                "room": SIGNAL_ROOM
            });

            io.on('signaling_message', function(data) {
                displaySignalMessage("Signal received: " + data.type);

                // Setup RTC Peer Connection object
                if (!rtcPeerConn) {
                    startSignaling();                    
                }

                if (data.type == "user_here") {
                    // do nothing, it is just the bogus signal we use for testing
                } else {
                    var message = JSON.parse(data.message);
                    if (message.sdp) {
                        rtcPeerConn.setRemoteDescription(
                            new RTCSessionDescription(message.sdp), 
                            function() {
                                // if we received a offer, we need to answer
                                if (rtcPeerConn.remoteDescription.type == 'offer') {
                                    rtcPeerConn.createAnswer(sendLocalDesc, logError);
                                }
                            },
                            logError
                        );
                    } else {
                        rtcPeerConn.addIceCandidate(new RTCIceCandidate(message.candidate));
                    }
                }


            });

            function startSignaling() {
                displaySignalMessage('starting signaling...');

                rtcPeerConn = new webkitRTCPeerConnection(configuration);

                // send any ice candidates to the other peer
                rtcPeerConn.onicecadidate = function(e) {
                    if (e.candidate) {
                        io.emit('signal', {
                            "type": "ice candidate",
                            "message": JSON.stringyfy({"candidate": e.candidate}),
                            "room": SIGNAL_ROOM
                        });
                        displaySignalMessage("completed ice candidate...");
                    }
                        
                };

                // let the 'negotiationneeded' event trigger offer generation
                rtcPeerConn.onnegotiationneeded = function() {
                    displaySignalMessage("on negotiation called");
                    rtcPeerConn.createOffer(sendLocalDesc, logError);
                }

                // once remote stream arrives, show it in the remote video element
                rtcPeerConn.onaddstream = function(e) {
                    displaySignalMessage("going to add their stream...");
                    theirVideoArea.src = URL.createObjectURL(e.stream);
                };

                // get a local stream, show it in our video tag and add it to be sent 
                navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
                navigator.getUserMedia({
                    'audio': true,
                    'video': true
                }, function(stream) {
                    displaySignalMessage("going to display my stream...");
                    myVideoArea.src = URL.createObjectURL(stream);
                    rtcPeerConn.addStream(stream);
                }, logError);
            }

            function sendLocalDesc(desc) {
                rtcPeerConn.setLocalDescription(desc, function() {
                    displaySignalMessage("sending local description");
                    io.emit('signal', {
                        "type": "SDP",
                        "message": JSON.stringify({"sdp": rtcPeerConn.localDescription}),
                        "room": SIGNAL_ROOM
                    });
                });
            }

            function logError(error) {
                displaySignalMessage(error.name + ': ' + error.message);
            }

            io.on('announce', function(data) {
                displayMessage(data.message);
            });

            io.on('message', function(data) {
                displayMessage(data.author + ": " + data.message);
            });

            sendMessage.addEventListener('click', function(e) {
                e.preventDefault();
                io.emit('send', {
                    "author": myName.value,
                    "message": myMessage.value,
                    "room": CHAT_ROOM
                });
            }, false);

            function displayMessage(message) {
                chatArea.innerHTML = chatArea.innerHTML + "<br>" + message;
            }


            function displaySignalMessage(message) {
                signalingArea.innerHTML = signalingArea.innerHTML + "<br>" + message;
            }
        </script>
    </body>
</html>