<!DOCTYPE html>
<html lang="en">
    <head>
        <title>Intro to WebRTC</title>
        <link rel="stylesheet" href="styles.css">
    </head>
    <body>

        <div id="camera-select-wrapper">
            Video: <select id="camera-select">
                <option value="no_camera_selected">please select camera</option>
            </select>
        </div>

        <p><button id="take-profile-pic-button" type="button" autofocus="true">Take a profile picture</button></p>
        <canvas id="profile-pic-canvas" style="display: none;"></canvas>
        <div>
            <img id="profile-pic-output" src="" alt="">
        </div>
        <video id="video-tag" autoplay></video>

        <script>
            var videoArea = document.querySelector("video");
            var videoSelect = document.getElementById('camera-select');
            var profilePicCanvas = document.getElementById('profile-pic-canvas');
            var profilePicOutput = document.getElementById('profile-pic-output');
            var takeProfilePicButton = document.getElementById('take-profile-pic-button');
            var videoTag = document.getElementById('video-tag');

            var profilePicOptions = {
                width: 240,
                height: 0, // Calculated later based on image ratio
            }

            var streaming = false; // Used to determine when the video has loaded

            takeProfilePicButton.addEventListener('click', function(e) {
                takeProfilePic(profilePicOptions);
                e.preventDefault;
            }, false);

            function takeProfilePic(options) {
                var context = profilePicCanvas.getContext('2d');
                if (options.width && options.height) {
                    profilePicCanvas.width = options.width;
                    profilePicCanvas.height = options.height;
                    context.drawImage(videoTag, 0, 0 ,options.width, options.height);

                    var data = profilePicCanvas.toDataURL('image/png');
                    profilePicOutput.setAttribute('src', data);
                }
            }

            videoTag.addEventListener('canplay', function (e) {
                if (streaming === true) {
                    return;
                } 

                profilePicOptions.height = videoTag.videoHeight / (videoTag.videoWidth / profilePicOptions.width);

                // ff has a bug where the height can't be read from video.
                // if this happens we will assume a ratio
                if (isNaN(profilePicOptions.height)) {
                    profilePicOptions.height = profilePicOptions.width / ( 4/3 );
                }

                videoTag.setAttribute('width', profilePicOptions.width);
                videoTag.setAttribute('height', profilePicOptions.height);
                profilePicCanvas.setAttribute('width', profilePicOptions.width);
                profilePicCanvas.setAttribute('height', profilePicOptions.height);

            }, false);
            
            (function() {
                if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {
                    console.log("enumerateDevices() not supported.");
                    document.getElementById('camera-select-wrapper').style.visibility = 'hidden';
                    return;
                }

                // List cameras and microphones.
                navigator.mediaDevices.enumerateDevices()
                    .then(function(devices) {
                        devices.forEach(function(device) {
                            console.log(device.kind + ": " + device.label + " id = " + device.deviceId);
                            var option = document.createElement('option');
                            option.value = device.deviceId;
                            if (device.kind === 'videoinput') {
                                option.text = device.label || 'camera ' + (videoSelect.length + 1);
                                videoSelect.appendChild(option);
                            }
                        });
                    })
                    .catch(function(err) {
                        console.log(err.name + ": " + err.message);
                    });
            })();

            videoSelect.onchange = startStream;

            startStream();

            function startStream() {
                navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
                // what about navigator.mediaDevices.getUserMedia and MediaDevices.getUserMedia ?
                
                var videoSource = videoSelect.value;

                if (videoSource === 'no_camera_selected') {
                    console.log('no_camera_selected');
                    return;
                }
                
                var constraints = {audio: true, video: {
                    mandatory: {
                        minWidth: 240,
                        minHeight: 240,

                        maxWidth: 240,
                        maxHeight: 240
                    },
                    optional: [{
                        sourceId: videoSource
                    }]
                }};

                navigator.getUserMedia(constraints, onSuccess, onError);
            }
            
            function onSuccess(stream) {
                console.log("Success! We have a stream");
                videoArea.src = window.URL.createObjectURL(stream);
                videoArea.className = "grayscale_filter";
                videoArea.play();
            }

            function onError(error) {
                console.log("Error: ", error);
            }
        </script>
    </body>
</html>